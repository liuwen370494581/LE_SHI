package star.liuwen.com.le_shi.Dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import star.liuwen.com.le_shi.Model.CoverModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COVER_MODEL".
*/
public class CoverModelDao extends AbstractDao<CoverModel, Long> {

    public static final String TABLENAME = "COVER_MODEL";

    /**
     * Properties of entity CoverModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property UserTel = new Property(1, String.class, "userTel", false, "USER_TEL");
        public final static Property CoverVideoUrl = new Property(2, String.class, "coverVideoUrl", false, "COVER_VIDEO_URL");
        public final static Property CoverDesc = new Property(3, String.class, "coverDesc", false, "COVER_DESC");
        public final static Property CoverTitle = new Property(4, String.class, "coverTitle", false, "COVER_TITLE");
        public final static Property CoverUrl = new Property(5, String.class, "coverUrl", false, "COVER_URL");
        public final static Property CoverPage = new Property(6, String.class, "coverPage", false, "COVER_PAGE");
        public final static Property CoverWatchDate = new Property(7, String.class, "coverWatchDate", false, "COVER_WATCH_DATE");
        public final static Property CompareTime = new Property(8, String.class, "compareTime", false, "COMPARE_TIME");
    }


    public CoverModelDao(DaoConfig config) {
        super(config);
    }
    
    public CoverModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COVER_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"USER_TEL\" TEXT," + // 1: userTel
                "\"COVER_VIDEO_URL\" TEXT," + // 2: coverVideoUrl
                "\"COVER_DESC\" TEXT," + // 3: coverDesc
                "\"COVER_TITLE\" TEXT," + // 4: coverTitle
                "\"COVER_URL\" TEXT," + // 5: coverUrl
                "\"COVER_PAGE\" TEXT," + // 6: coverPage
                "\"COVER_WATCH_DATE\" TEXT," + // 7: coverWatchDate
                "\"COMPARE_TIME\" TEXT);"); // 8: compareTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COVER_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CoverModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String userTel = entity.getUserTel();
        if (userTel != null) {
            stmt.bindString(2, userTel);
        }
 
        String coverVideoUrl = entity.getCoverVideoUrl();
        if (coverVideoUrl != null) {
            stmt.bindString(3, coverVideoUrl);
        }
 
        String coverDesc = entity.getCoverDesc();
        if (coverDesc != null) {
            stmt.bindString(4, coverDesc);
        }
 
        String coverTitle = entity.getCoverTitle();
        if (coverTitle != null) {
            stmt.bindString(5, coverTitle);
        }
 
        String coverUrl = entity.getCoverUrl();
        if (coverUrl != null) {
            stmt.bindString(6, coverUrl);
        }
 
        String coverPage = entity.getCoverPage();
        if (coverPage != null) {
            stmt.bindString(7, coverPage);
        }
 
        String coverWatchDate = entity.getCoverWatchDate();
        if (coverWatchDate != null) {
            stmt.bindString(8, coverWatchDate);
        }
 
        String compareTime = entity.getCompareTime();
        if (compareTime != null) {
            stmt.bindString(9, compareTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CoverModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String userTel = entity.getUserTel();
        if (userTel != null) {
            stmt.bindString(2, userTel);
        }
 
        String coverVideoUrl = entity.getCoverVideoUrl();
        if (coverVideoUrl != null) {
            stmt.bindString(3, coverVideoUrl);
        }
 
        String coverDesc = entity.getCoverDesc();
        if (coverDesc != null) {
            stmt.bindString(4, coverDesc);
        }
 
        String coverTitle = entity.getCoverTitle();
        if (coverTitle != null) {
            stmt.bindString(5, coverTitle);
        }
 
        String coverUrl = entity.getCoverUrl();
        if (coverUrl != null) {
            stmt.bindString(6, coverUrl);
        }
 
        String coverPage = entity.getCoverPage();
        if (coverPage != null) {
            stmt.bindString(7, coverPage);
        }
 
        String coverWatchDate = entity.getCoverWatchDate();
        if (coverWatchDate != null) {
            stmt.bindString(8, coverWatchDate);
        }
 
        String compareTime = entity.getCompareTime();
        if (compareTime != null) {
            stmt.bindString(9, compareTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CoverModel readEntity(Cursor cursor, int offset) {
        CoverModel entity = new CoverModel( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userTel
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // coverVideoUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // coverDesc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // coverTitle
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // coverUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // coverPage
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // coverWatchDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // compareTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CoverModel entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUserTel(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCoverVideoUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCoverDesc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCoverTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCoverUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCoverPage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCoverWatchDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCompareTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CoverModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CoverModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CoverModel entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
